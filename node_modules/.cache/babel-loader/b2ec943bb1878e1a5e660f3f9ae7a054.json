{"ast":null,"code":"var _jsxFileName = \"/home/noshu/react/test1/src/components/login/loginform.js\";\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport React from 'react';\nexport const LoginForm = props => {\n  return /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      username: '',\n      password: ''\n    },\n    validate: values => {\n      const errors = {};\n\n      if (!values.username) {\n        errors.username = 'Username is required';\n      }\n\n      if (values.password.length < 8) {\n        errors.password = 'Password length should be 8';\n      }\n\n      if (!values.password) {\n        errors.password = 'Password is required';\n      }\n\n      return errors;\n    },\n    onSubmit: (values, {\n      setSubmitting\n    }) => {\n      setSubmitting(false);\n      props.formSubmission(values);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 9\n    }\n  }, ({\n    isSubmitting\n  }) => /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 29\n    }\n  }, \"Username\"), /*#__PURE__*/React.createElement(Field, {\n    type: \"text\",\n    name: \"username\",\n    placeholder: \"username\",\n    className: \"form-control\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(ErrorMessage, {\n    name: \"username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 25\n    }\n  }, msg => /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 63\n    }\n  }, msg)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 29\n    }\n  }, \"Password\"), /*#__PURE__*/React.createElement(Field, {\n    type: \"password\",\n    name: \"password\",\n    placeholder: \"Password\",\n    className: \"form-control\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(ErrorMessage, {\n    name: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 25\n    }\n  }, msg => /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 63\n    }\n  }, msg)), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-success w-100\",\n    type: \"submit\",\n    disabled: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 25\n    }\n  }, \"Login\")));\n};","map":{"version":3,"sources":["/home/noshu/react/test1/src/components/login/loginform.js"],"names":["Formik","Form","Field","ErrorMessage","React","LoginForm","props","username","password","values","errors","length","setSubmitting","formSubmission","isSubmitting","msg"],"mappings":";AAAA,SAAQA,MAAR,EAAgBC,IAAhB,EAAsBC,KAAtB,EAA6BC,YAA7B,QAAiD,QAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,MAAMC,SAAS,GAAGC,KAAK,IAAI;AAC9B,sBACI,oBAAC,MAAD;AACI,IAAA,aAAa,EAAI;AAACC,MAAAA,QAAQ,EAAC,EAAV;AAAaC,MAAAA,QAAQ,EAAC;AAAtB,KADrB;AAEI,IAAA,QAAQ,EACJC,MAAM,IAAI;AACN,YAAMC,MAAM,GAAG,EAAf;;AACA,UAAG,CAACD,MAAM,CAACF,QAAX,EAAoB;AAChBG,QAAAA,MAAM,CAACH,QAAP,GAAkB,sBAAlB;AACH;;AACD,UAAGE,MAAM,CAACD,QAAP,CAAgBG,MAAhB,GAAyB,CAA5B,EAA8B;AAC1BD,QAAAA,MAAM,CAACF,QAAP,GAAkB,6BAAlB;AACH;;AACD,UAAG,CAACC,MAAM,CAACD,QAAX,EAAoB;AAChBE,QAAAA,MAAM,CAACF,QAAP,GAAkB,sBAAlB;AACH;;AAED,aAAOE,MAAP;AACH,KAhBT;AAkBI,IAAA,QAAQ,EACJ,CAACD,MAAD,EAAQ;AAACG,MAAAA;AAAD,KAAR,KAA4B;AACxBA,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAN,MAAAA,KAAK,CAACO,cAAN,CAAqBJ,MAArB;AACH,KAtBT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA0BQ,CAAC;AACGK,IAAAA;AADH,GAAD,kBAGI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,oBAAC,KAAD;AACA,IAAA,IAAI,EAAC,MADL;AAEA,IAAA,IAAI,EAAC,UAFL;AAGA,IAAA,WAAW,EAAC,UAHZ;AAIA,IAAA,SAAS,EAAC,cAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,eAUI,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAC,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+BC,GAAG,iBAAI;AAAG,IAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4BA,GAA5B,CAAtC,CAVJ,eAYI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,oBAAC,KAAD;AACA,IAAA,IAAI,EAAC,UADL;AAEA,IAAA,IAAI,EAAC,UAFL;AAGA,IAAA,WAAW,EAAC,UAHZ;AAIA,IAAA,SAAS,EAAC,cAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAZJ,eAqBI,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAC,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+BA,GAAG,iBAAI;AAAG,IAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4BA,GAA5B,CAAtC,CArBJ,eAuBI;AAAQ,IAAA,SAAS,EAAC,uBAAlB;AAA0C,IAAA,IAAI,EAAC,QAA/C;AAAwD,IAAA,QAAQ,EAAED,YAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAvBJ,CA7BZ,CADJ;AA2DH,CA5DM","sourcesContent":["import {Formik, Form, Field, ErrorMessage } from 'formik';\nimport React from 'react';\nexport const LoginForm = props => {\n    return (\n        <Formik\n            initialValues = {{username:'',password:''}}\n            validate = {\n                values => {\n                    const errors = {}\n                    if(!values.username){\n                        errors.username = 'Username is required'\n                    }\n                    if(values.password.length < 8){\n                        errors.password = 'Password length should be 8'\n                    }\n                    if(!values.password){\n                        errors.password = 'Password is required'\n                    }\n\n                    return errors;\n                }\n            }\n            onSubmit = {\n                (values,{setSubmitting}) => {\n                    setSubmitting(false)\n                    props.formSubmission(values)\n                }\n            }\n        >\n            {\n                ({\n                    isSubmitting\n                }) => \n                    <Form>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"username\">Username</label>\n                            <Field \n                            type=\"text\" \n                            name='username' \n                            placeholder='username' \n                            className=\"form-control\"\n                            />\n                        </div>\n                        <ErrorMessage name='username'>{msg => <p className=\"text-danger\">{msg}</p> }</ErrorMessage>\n                        \n                        <div className=\"form-group\">\n                            <label htmlFor=\"password\">Password</label>\n                            <Field\n                            type=\"password\" \n                            name='password' \n                            placeholder='Password' \n                            className=\"form-control\"\n                            />\n                        </div>\n                        <ErrorMessage name='password'>{msg => <p className=\"text-danger\">{msg}</p> }</ErrorMessage>\n\n                        <button className=\"btn btn-success w-100\" type='submit' disabled={isSubmitting}>Login</button>\n                    </Form>\n                \n            }\n        </Formik>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}